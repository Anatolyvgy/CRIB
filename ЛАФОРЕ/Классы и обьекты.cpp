
#include<iostream>
#include<cstdlib>
using namespace std;
class smallobj // определение класса
{
private:
	int somedata; // поле класса
public:
	void setdata(int d) // метод класса, изменяющий значение поля
	{
		somedata = d;
	}
	void showdata() // метод класса, отображающий значение поля
	{
		cout << "Значение поля равно " << somedata << endl;
	}
};

int main()
{
	system("chcp 1251>nul");
	smallobj s1, s2; // определение двух объектов класса smallobj
	s1.setdata(1066); // вызовы метода setdata(), присваиваем полю somedata объекта s1
                       //значение, равное 1066
	s2.setdata(1776);
	s1.showdata(); // вызовы метода showdata()
	s2.showdata();
		
	return 0;
}

**************************************************************************************

//Список инициализации

/*Counter() : count(0)
{ }
Инициализация расположена между прототипом метода и телом функции и
предварена двоеточием. Инициализирующее значение помещено в скобках после имени поля.
Если необходимо инициализировать сразу несколько полей класса, то значения разделяются
 запятыми, и в результате образуется список инициализации:
SomeClass() : m1(7), m2(33), m3(4)
{ }*/

****************************************************************************************


// Объекты в качестве аргументов функций

#include<iostream>
using namespace std;
class Distance
{
private:
	int feet;
	float inches;
public:
	Distance() : feet(0), inches(0) // список инициализации - конструктор инициализирует поля класса с помощью :
		                            // конструктор по умолчанию	
	{
	}								// тело конструктора пусто, никаких действий не производится
	Distance(int ft, float in) : feet(ft), inches(in)// конструктор с двумя аргументами
		                       // тоже список инициализации - конструктор инициализирует поля класса с помощью :
	{}

	void getdist() // ввод длины
	{
		cout << "Enter futs:" << endl;
		cin >> feet;
		cout << "Enter duims:" << endl;
		cin >> inches;
	}
	void showdist()// вывод длины на экран
	{
		cout << feet << inches << endl;
	}
	void add_dist(Distance, Distance); // прототип
};
// сложение длин d1 и d2
void Distance::add_dist(Distance dd1, Distance dd2)//символ :: является знаком операции глобального разрешения.
               //запись Distance::add_dist() означает, что функция add_dist() является методом класса Distance.
			   // перед Distance нужно указывать тип возвращаемого значения
{
	inches = dd1.inches + dd2.inches; // сложение дюймов
	feet = 0;                         // с возможным заемом
	if (inches >= 12.0)               // если число дюймов больше 12.0,
	{                                 // то уменьшаем число дюймов
		inches -= 12.0;               // на 12.0 и 
		feet++;                       // увеличиваем число футов на 1
	}
	feet += dd1.feet + dd2.feet;      // сложение футов
}
int main()
{
	Distance dist1, dist3;            // две длины поля этих обьектов инициализируются конструктором по умолчанию 
	                                  // (без аргументов)
	Distance dist2(11, 6.25);         // определение и инициализация - присваиваем начальные значения полям 
	                                  // обьекта dist2
	dist1.getdist();                  // ввод dist1
	dist3.add_dist(dist1, dist2);     // dist3 = dist1 + dist2
	// вывод всех длин
	cout << "\ndist1 = "; dist1.showdist();
	cout << "\ndist2 = "; dist2.showdist();
	cout << "\ndist3 = "; dist3.showdist();
	cout << endl;
	return 0;
}

******************************************************************

// Счетчик

// счетчик в качестве объекта
#include <iostream>
using namespace std;
//////////////////////////////////////////////////////////
class Counter
{
private:
unsigned int count; // значение счетчика
public:
Counter() : count(0) // конструктор Counter инициализирует переменную count 0
{ /* пустое тело */ }
void inc_count() // инкрементирование счетчика
{ count++; }
int get_count() // получение значения счетчика
{ return count; }
};
//////////////////////////////////////////////////////////
int main()
{
Counter c1, c2; // определение с инициализацией
cout << "\nc1 =" << c1.get_count(); // вывод
cout << "\nc2 =" << c2.get_count();
c1.inc_count(); // инкрементирование c1
c2.inc_count(); // инкрементирование c2
c2.inc_count(); // инкрементирование c2
cout << "\nc1 =" << c1.get_count(); // вывод
cout << "\nc2 =" << c2.get_count();
cout << endl;
return 0;
}

************************************************************************************************

//Конструктор копирования по умолчанию - это способ инициализации объекта, использующий значения
// полей уже существующего объекта.такой конструктор предоставляется компилятором для каждого 
//создаваемого класса.Копирующий конструктор имеет единственный аргумент, являющийся объектом
// того же класса, что и конструктор.

// инициализация объектов с помощью копирующего конструктора
#include <iostream>
using namespace std;
//////////////////////////////////////////////////////////
class Distance // длина в английской системе
{
private:
int feet;
float inches;
public:
// конструктор без аргументов
Distance() : feet(0), inches(0.0)// конструктор инициализирует поля класса с помощью :
{ }
// конструктора с одним аргументом нет!
// конструктор с двумя аргументами
Distance(int ft, float in) : feet(ft), inches(in)//конструктор инициализирует поля 
                                                 //класса с помощью :
{ }
void getdist() // ввод длины пользователем
{
cout << "\nВведите число футов "; cin >> feet;
cout << "Введите число дюймов: "; cin >> inches;
}
void showdist() // вывод длины
{ cout << feet << "\'-" << inches << '\"'; }
};
//////////////////////////////////////////////////////////
int main()
{
Distance dist1(11, 6.25); // конструктор с двумя аргументами
Distance dist2(dist1);    // два конструктора с одним аргументом оба из которых инициализируются                       
Distance dist3 = dist1;   //значением объекта dist1. В обоих случаях был вызван копирующий 
                          //конструктор по умолчанию. Действие копирующего конструктора 
						  //по умолчанию сводится к копированию значений полей объекта dist1 в 
						  //соответствующие поля объекта dist2.
// вывод всех длин
cout << "\ndist1 = "; dist1.showdist();
cout << "\ndist2 = "; dist2.showdist();
cout << "\ndist3 = "; dist3.showdist();
cout << endl;
return 0;
}

*************************************************************************************************

//  Объекты, возвращаемые функцией

// возвращение функцией значения типа Distance
#include <iostream>
using namespace std;
//////////////////////////////////////////////////////////
class Distance // длина в английской системе
{
private:
int feet;
float inches;
public: // конструктор без аргументов
Distance() : feet(0), inches(0.0)// конструктор инициализирует поля 
{ } // конструктор с двумя аргументами
Distance(int ft, float in) : feet(ft), inches(in)
{ }
void getdist() // ввод длины
{
cout << "\nВведите число футов: "; cin >> feet;
cout << "Введите число дюймов: "; cin >> inches;
}
void showdist() // вывод длины
{ cout << feet << "\'-" << inches << '\"'; }
Distance add_dist(Distance); // сложение
};
//--------------------------------------------------------
// сложение данного объекта с d2, возврат суммы
Distance Distance::add_dist(Distance d2)
{
Distance temp; // временная переменная
temp.inches = inches + d2.inches; // сложение дюймов
if(temp.inches >= 12.0) // если сумма больше 12.0,
{ // то уменьшаем ее на
temp.inches -= 12.0; // 12.0 и увеличиваем
temp.feet = 1; // число футов на 1
}
temp.feet += feet + d2.feet; // сложение футов
return temp;
}
//////////////////////////////////////////////////////////
int main()
{
Distance dist1, dist3; // две длины
Distance dist2(11, 6.25); // определение и инициализация dist2
dist1.getdist(); // ввод dist1 пользователем
dist3 = dist1.add_dist(dist2); // dist3 = dist1 + dist2
// вывод всех длин
cout << "\ndist1 = "; dist1.showdist();
cout << "\ndist2 = "; dist2.showdist();
cout << "\ndist3 = "; dist3.showdist();
cout << endl;
return 0;
}

************************************************************************************************
//  Статические данные класса

#include<iostream>
#include<cstdlib>
using namespace std;
 
class foo
{
private:
	static int count; // общее поле для всех объектов
	                  // (в смысле "объявления")
public:

	foo()             // инкрементирование при создании объекта
	{
		count++;
	}
	int getcount()   // возвращает значение count
	{
		return count;
	}
};
int foo::count = 0; // *определение* count - при статическом обьявлении поля класса его
                    // нужно инициализировать так  
int main()          // читается переменная count класса foo типа int принимает значение 0 
{	
	system("chcp 1251>nul");
	foo f1;	
	foo f2;
	foo f3; // создание трех объектов
	// каждый объект видит одно и то же значение
	cout << "Число объектов: " << f1.getcount() << endl;
	cout << "Число объектов: " << f2.getcount() << endl;
	cout << "Число объектов: " << f3.getcount() << endl;	
	return 0;
}





стр 310






